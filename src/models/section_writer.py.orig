# src/models/section_writer.py

from src.agents.agents import Agents
from src.prompts.section_prompts import SECTION_PROMPT_ZERO, SECTION_PROMPT_GUSTAVE
from src.utils.irc_logger import irc_logger
import traceback

class SectionWriter:
    def __init__(self, book_title, full_toc, section_number, section_title):
        self.book_title = book_title
        self.full_toc = full_toc
        self.section_number = section_number
        self.section_title = section_title
        self.agents = Agents()
        self.messages = []
        self.section_content = None
        self._setup_agents()

    def _setup_agents(self):
        """Initialize the Zero and Gustave agents with section-specific prompts"""
        formatted_zero_prompt = SECTION_PROMPT_ZERO.format(
            book_title=self.book_title,
            full_toc=self.full_toc,
            section_number=self.section_number,
            section_title=self.section_title
        )
        formatted_gustave_prompt = SECTION_PROMPT_GUSTAVE.format(
            book_title=self.book_title,
            full_toc=self.full_toc,
            section_number=self.section_number,
            section_title=self.section_title
        )

        # Initialize agents to None
        self.zero_agent = None
        self.gustave_agent = None

        # Define handoff functions as local functions
        def handoff_to_gustave():
            """Function to hand off control to Gustave."""
            return self.gustave_agent

        def handoff_to_zero():
            """Function to hand off control back to Zero."""
            return self.zero_agent

        # Create agents with the local handoff functions
        self.zero_agent = self.agents.get_zero(formatted_zero_prompt, [handoff_to_gustave])
        self.gustave_agent = self.agents.get_gustave(formatted_gustave_prompt, [handoff_to_zero])

    def write(self):
        """Generate section content through agent collaboration"""
        initial_message = {
            "role": "user",
            "content": f"Let's collaborate on writing the section {self.section_number}: {self.section_title}."
        }

        self.messages = [initial_message]
        attempt_count = 0
        max_attempts = 10
        current_agent = self.zero_agent

        try:
            while attempt_count < max_attempts:
                attempt_count += 1

                response = self.agents.client.run(
                    agent=current_agent,
                    messages=self.messages,
                    context_variables={
                        "book_title": self.book_title,
                        "full_toc": self.full_toc,
                        "section_number": self.section_number,
                        "section_title": self.section_title
                    },
                    max_turns=1,
                    debug=False
                )

                if response is None or response.messages is None:
                    irc_logger.error("Received an invalid response from the agent.")
                    break

                last_message = response.messages[-1]
                formatted_content = self._format_message(last_message.get('content', ''))
                irc_logger.agent_message(current_agent.name, formatted_content)
                self.messages.extend(response.messages)

                # Check for consensus
                if "Consensus: True" in last_message.get('content', ''):
                    self._extract_section_content(last_message.get('content', ''))
                    irc_logger.success(f"Consensus reached on Section {self.section_number}: {self.section_title}.")
                    break

                # Switch to the other agent
                current_agent = self._handoff_to_gustave() if current_agent.name == "Zero" else self._handoff_to_zero()

            else:
                irc_logger.warning("Max attempts reached. Forcing consensus.")
                self._force_consensus()

        except Exception as e:
            irc_logger.error(f"Error during section writing: {str(e)}")
            traceback_str = traceback.format_exc()
            irc_logger.error(f"Traceback: {traceback_str}")
            return None

        if self.section_content:
            irc_logger.system_message(f"Section {self.section_number}: {self.section_title} generated successfully.")
        else:
            irc_logger.error(f"Failed to generate Section {self.section_number}: {self.section_title}.")

        return self.section_content

    def _format_message(self, content):
        """
        Formats the message content by removing system messages.
        System messages start with 'HANDOFF:' or contain 'functions.' calls.
        """
        lines = content.split('\n')
        filtered_lines = []
        for line in lines:
            if line.startswith("HANDOFF:") or "functions." in line:
                continue
            filtered_lines.append(line)
        return '\n'.join(filtered_lines).strip()

    def _extract_section_content(self, content):
        """Extract the finalized section content from the agent's response"""
        lines = content.split('\n')
        content_started = False
        content_lines = []
        for line in lines:
            if content_started:
                content_lines.append(line)
            elif line.strip().startswith("Consensus: True"):
                content_started = True
        self.section_content = '\n'.join(content_lines).strip()

    def _force_consensus(self):
        """Force consensus with the last proposed section content"""
        for msg in reversed(self.messages):
            content = msg.get("content", "")
            if "Consensus: False" in content or "Consensus: True" in content:
                # Extract the content after "Consensus: False" or "Consensus: True"
                lines = content.split('\n')
                content_started = False
                content_lines = []
                for line in lines:
                    if content_started:
                        content_lines.append(line)
                    elif line.strip().startswith("Consensus:"):
                        content_started = True
                if content_lines:
                    self.section_content = '\n'.join(content_lines).strip()
                    irc_logger.info("Forced consensus on the last proposed section content.")
                    return
        self.section_content = "No content generated for this section."
        irc_logger.warning("No valid section content found to force consensus.")

